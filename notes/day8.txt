1. singleton 
2. Factory 
3. Abstract Factory Pattern 
4. Strategy Pattern 
5. Command Pattern 

6. Proxy Pattern 
*********************************************************************
dao is instance of class com.training.proxy.dao.DummyProductDao
Saving product... 
Deleting product... 
Getting product count from DB 
There are 88 number of product... 
*********************************************************************
dao is instance of class com.sun.proxy.$Proxy0
*** Begining Transaction*** 
Saving product... 
*** End Transaction*** 
--------------------------------------
*** Begining Transaction*** 
Deleting product... 
*** End Transaction*** 
--------------------------------------
Getting product count from DB 
There are 88 number of product... 

*********************************************************************



7. Observer Pattern (checked)
8. Builder Pattern (checked)
	select * from employe; 
	select * from employe where empname like "%harry%"; 
	select * from employe where empname like "%harry%" or empcity like "%bengaluru%"; 	
	select * from employe where empname like "%harry%" or empcity like "%bengaluru%" order by empname asc; 		
	select * from employe where empname like "%harry%" or empcity like "%bengaluru%" order by empname asc, city desc; 			
9. Criteria Pattern 
10. IoC Pattern 
11. Aop (Cross Cutting Concern)
12. Service Locator Pattern (checked)
13. Bridge Pattern 
	Shape
		RedCircle
		BlueCircle
		GreenCircle
		RedSquare
		BlueSquare
		GreenSquare




 


--------------------------------------------------
Difference in the Patterns
--------------------------------------------------
A decorator adds one or more responsibilities to an object, whereas a proxy controls access to an object.

Proxies vary in the degree to which they are implemented like a decorator. A protection proxy might be implemented exactly like a decorator. 

The difference between Proxy and Decorator according to the GoF is that Proxy restricts the client. Decorator does not.


Bridge Pattern: Decouple an abstraction from its implementation so that the two can vary independently.



Mysql m = new Mysql(); 
Oracle o = new Oracle(); 



Dao m = new Mysql(); 
Dao o = new Oracle(); 



Dao m = spring.getBean("mysql"); 
Dao o = spring.getBean("oracle"); 




class Car {

	public static Car getCar(String car) {
		if(car.equals("maruti")) {
			return new Maruti(); 
		}else if(car.equals("bmw")) {
			return new BMW();
		}else if(car.equals("toyota")) {
			return new Toyota();
		}
		
		return null; 
	}
}

class Maruti extends Car {}
class BMW extends Car{}
class Toyota extends Car{}


http://localhost:8080/app/bye 


<servlet>
	<servlet-name>hi</servlet-name>
	<servlet-class>com.naveen.Class</servlet-class>
</servlet>

<servlet-mapping>
<servlet-name>hi</servlet-name>
<url-pattern>/hi</url-pattern>
</servlet-mapping>

<config>
	404 
</config>





Spring Boot 



https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.3.4.RELEASE&packaging=jar&jvmVersion=11&groupId=com.baxter&artifactId=boot-works&name=boot-works&description=Demo%20project%20for%20Spring%20Boot&packageName=com.baxter.boot-works&dependencies=web,lombok,devtools,data-mongodb















